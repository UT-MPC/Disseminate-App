package mobile;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MulticastSocket;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.concurrent.LinkedBlockingQueue;

import common.Chunk;
import common.Message;
import common.Subscription;
import common.Utility;
import network.TcpReceiver;

public class MobileMain {

	private static final int LPORT = 9000;
	
	public static String results = "";
	
	public static void main(String args[]) {
		
		final int spaces = Integer.parseInt(args[0]);
		final int rateSend = Integer.parseInt(args[1]);
		final String config = args[2];
		
		Runtime.getRuntime().addShutdownHook ( new Thread(new Runnable() {
			
			@Override
			public void run() {
				System.out.println("Dumping results");
				dumpDistance( results, "Mobile", spaces, rateSend, config);
			}
		}));
		
		// TODO: needs to be moved to some other thread
		try {
			
			// unicast only
			DatagramSocket ds = new DatagramSocket(LPORT); // listening port
			// broadcast only
			//InetAddress broadcastAddr = InetAddress.getByName("230.5.6.7");
			//MulticastSocket ds = new MulticastSocket(LPORT);
			//ds.joinGroup(broadcastAddr);
			
			/*try {
				Utility.init();
				long st = System.currentTimeMillis();
				ProcessBuilder pb = new ProcessBuilder("/bin/sh", "-c",
						"iw dev wlan0 station dump | grep -E 'Station|signal:'");
				Process p = pb.start();
				p.waitFor();
				BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
				String line;
				String aggLine = "";
				while ((line=br.readLine()) != null) {
					String [] tokens = line.trim().split("\\s+");
					String ip = Utility.macToIp.get(tokens[1]);
					System.out.println("Ip: "+ip);

					tokens = br.readLine().trim().split("\\s+");
					int rssi = Integer.parseInt(tokens[1]);
					System.out.println("RSSI: "+rssi);
				}
				long et = System.currentTimeMillis();
				double ts = (double)(et-st)/1000;
				System.out.println("Proc time: "+ts);
				System.out.println(aggLine);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			*/
			byte [] recvBuf = new byte[1024*1000];
			DatagramPacket recvPak = new DatagramPacket(recvBuf, recvBuf.length);
			Chunk recvChk = null;
		
			System.out.println("Recv Buffer Size: "+ds.getReceiveBufferSize());
			
			int numToRecv = 1000;
			int numReceived = 0;
			long bytesRecv = 0;
			ds.receive(recvPak); // intro packet to prompt time calculation
			long startTime = System.currentTimeMillis();
			System.out.println("Start time: "+startTime);
			
			LinkedBlockingQueue<DatagramPacket> chunkQueue = new LinkedBlockingQueue<DatagramPacket>();
			
			//while (numReceived < 200) {
				//for (int i=0; i<numToRecv; ++i) {
				while (true) {
					DatagramPacket recvPack = new DatagramPacket(recvBuf, recvBuf.length);
					ds.receive(recvPack);
					numReceived++;
					int length = recvPack.getLength();
					chunkQueue.put(recvPack);
					//System.out.println("Received packet, total "+numReceived+" of length: "+length);
					//recvChk = (Chunk) Utility.deserialize(recvPack.getData(), length);
					//if (recvMsg.type.equals("chunk")) {
					//	Chunk recvChunk = (Chunk) recvMsg;
					//	System.out.println("Received chunk: "+recvChk.itemId);
					//} else if (recvMsg.type.equals("sub")) {
					//	Subscription recvSub = (Subscription) recvMsg;
					//	System.out.println("Received subscription: "+recvSub.itemId);
					//}
					
					bytesRecv += length;

					long endTime = System.currentTimeMillis();
					//System.out.println("End time: "+endTime);
					long delta = endTime - startTime;
					double rate = ((double)bytesRecv) / (((double)delta)/1000);
					results += "Received: "+bytesRecv+" Bytes"+"\n";
					System.out.println("Received: "+bytesRecv+" Bytes");
					results += "Rate: "+(rate/1024)+" KBytes/sec"+"\n";
					System.out.println("Rate: "+(rate/1024)+" KBytes/sec");
				}
			//}

				/*long endTime = System.currentTimeMillis();
				System.out.println("End time: "+endTime);
				long delta = endTime - startTime;
				double rate = ((double)bytesRecv) / (((double)delta)/1000);
				
				System.out.println("Received: "+bytesRecv+" Bytes");
				System.out.println("Rate: "+(rate/1024)+" KBytes/sec");*/
				
			//ds.close();
			
			// ss.close();
			//ts.close();
			
		} catch (IOException e) {
			System.err.println("Error initializing Socket");
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public static void dumpDistance(String results, String loc, int spaces, int rate, String config) {
		String name = loc+"_"+"s"+spaces+"_"+"r"+rate+"c"+config;
		File f = new File(name+"0.txt");
		int i = 0;
		while (f.exists()) {
			i++;
			f = new File(name+i+".txt");
		}
		try {
			FileWriter fw = new FileWriter(f);
			fw.write(results);
			fw.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
}
