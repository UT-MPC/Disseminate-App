package source;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MulticastSocket;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;

import common.Chunk;
import common.Utility;
import network.TcpSender;

public class SourceMainTcp {
	
	private static final int LPORT = 9000;
	
	public static void main(String args[]) {
		
		InetSocketAddress destAddr = null;
		InetAddress addrOnly = null;
		InetAddress broadcastAddr = null;
		try {
			broadcastAddr = InetAddress.getByName("10.11.12.255"); //TODO: make this an arg
			
			if (args.length==0) {
				//System.out.println("No ip specified, using local host");
				destAddr = new InetSocketAddress("10.11.12.44",LPORT);
				//destAddr = new InetSocketAddress(InetAddress.getLocalHost(),LPORT);
			} else {
				//destAddr = new InetSocketAddress(args[0],LPORT);
				addrOnly = InetAddress.getByName(args[0]);
			}
		} catch (UnknownHostException e) {
			System.out.println("Error assigning address from args");
			e.printStackTrace();
		}
		try {
			
			Chunk temp = new Chunk("test", 0, 1024*8, "dest");
			
			// TCP start
			Socket s = new Socket();
			s.connect(destAddr);
			TcpSender ts = new TcpSender(s);
			int sz = Utility.sizeOfSerial(temp);
			// TCP end
			
			int numToSend = 100;
			System.out.println("Sending "+numToSend+" chunks!");
			
			long bytesSent = 0;
			int cnt = 0;
			long startTime = System.currentTimeMillis();
			System.out.println("Start time: "+startTime);
			
			for (int i=0; i<numToSend; ++i) {
				//ds.send(sendPack);
				bytesSent+=sz;
				cnt++;
				System.out.println("Sending packet #"+cnt);
				ts.send(temp); // sends the test object
				//System.out.println("Sent a chunk of size: "+ Utility.sizeOfSerial(temp)+" Bytes");
			}
			long endTime = System.currentTimeMillis();
			System.out.println("End time: "+endTime);
			long delta = endTime - startTime;
			double rate = ((double)bytesSent) / (((double)delta)/1000);
			
			System.out.println("Sent: "+bytesSent+" Bytes");
			System.out.println("Rate: "+(rate/1024)+" KBytes/sec");

			
			//ds.close();
			
			ts.close();
		} catch (IOException e) {
			System.err.println("Error initializing ServerSocket");
			e.printStackTrace();
		}
	}
}
